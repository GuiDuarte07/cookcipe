// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(50)
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password_hash String?   @db.VarChar(72)
  update_at     DateTime  @updatedAt
  created_at    DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]

  recipes          Recipe[]
  favorite_recipes Favorite_repices[]
  like_recipes     Likes_recipes[]
  Review           Review[]

  @@map("users")
}

model Recipe {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(200)
  image       String?
  description String   @db.MediumText
  prepTime    Int
  cookTime    Int
  difficulty  String   @db.VarChar(10)
  serves      Int
  published   Boolean  @default(true)
  likes       Int      @default(0)
  update_at   DateTime @updatedAt
  created_at  DateTime @default(now())

  author     User    @relation(fields: [authorId], references: [id])
  authorId   String
  showAuthor Boolean @default(true)

  ingredient_texts Ingredient_text[]
  home_appliance   Home_appliance[]
  steps            Step[]
  favorite         Favorite_repices[]
  like             Likes_recipes[]
  Review           Review[]

  @@map("recipes")
}

// model Ingredient {
//  id   String @id @default(uuid())
//  name String @db.TinyText
//  unit String @db.VarChar(20)
//
//  ingredient_name Ingredient_text[]
//
//  @@map("ingredients")
//}

model Ingredient_text {
  id   String @id @default(uuid())
  text String @db.VarChar(500)

  // ingredientId    String
  // ingredient_name Ingredient @relation(fields: [ingredientId], references: [id])
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("ingredients_texts")
}

model Home_appliance {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(30)

  recipes Recipe[]

  @@map("home_appliances")
}

model Step {
  id         String @id @default(uuid())
  stepNumber Int
  text       String @db.VarChar(500)

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("steps")
}

model Favorite_repices {
  id         String   @id @default(uuid())
  userId     String
  created_at DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id])
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("favorites_recipes")
}

model Likes_recipes {
  id         String   @id @default(uuid())
  userId     String
  created_at DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id])
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("likes_recipes")
}

model Review {
  id         String   @id @default(uuid())
  stars      Int
  comment    String?  @db.VarChar(500)
  update_at  DateTime @updatedAt
  created_at DateTime @default(now())

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  @@map("review")
}
